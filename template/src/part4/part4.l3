#lang racket/base

;; Signature: last-item(lst)
;; Type: [List(T) -> T]
;; Purpose: Returns the last item in a given list
;; Pre-conditions: lst cannot be empty
;; Tests: (last-item '(1 2 3)) => 3
;;        (last-item '(#t #t #f)) => #f

(define last-item
    (lambda (lst)
        (if (eq? (cdr lst) '())
            (car lst)
            (last-item (cdr lst)))
))

;; Signature: remove-last-item(lst)
;; Type: [List(T) -> List(T)]
;; Purpose: Returns a given list without the last item.
;; Pre-conditions: lst cannot be empty
;; Tests: (remove-last-item '(1 2 3)) => '(1 2)
;;        (remove-last-item '(#t #t #f)) => '(#t #t)

(define remove-last-item
    (lambda (lst)
        (if (eq? (cdr lst) '())
            '()
            (cons (car lst) (remove-last-item (cdr lst)))
)))

;; Signature: rotate-nth(lst, n)
;; Type: [List(T) * Number -> List(T)]
;; Purpose: Rotates a given list n times to the right.
;; Pre-conditions: lst cannot be empty, n >= 0
;; Tests: (rotate-nth '(1 2 3) 1) => '(3 1 2)
;;        (rotate_nth '(#t #t #f) 2) => '(#t #f #t)

(define rotate-nth
    (lambda (lst n)
        (if (equal? n 0)
            lst
            (rotate-nth (cons (last-item lst) (remove-last-item lst)) (- n 1)))
))