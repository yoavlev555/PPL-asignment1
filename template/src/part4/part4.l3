#lang racket/base

; Signature: last-item(lst)
; Type: [list -> Number]
; Purpose: Returns the last item in a given list
; Pre-conditions: lst cannot be empty
; Tests: (last-item '(123)) => 3

(define last-item
    (lambda (lst)
        (if (eq? (cdr lst) '())
            (car lst)
            (last-item (cdr lst)))
))

; Signature: remove-last-item(lst)
; Type: [list -> list]
; Purpose: Returns a given list without the last item.
; Pre-conditions: lst cannot be empty
; Tests: (remove-last-item '(1 2 3)) => '(1 2)

(define remove-last-item
    (lambda (lst)
        (if (eq? (cdr lst) '())
            '()
            (cons (car lst) (remove-last-item (cdr lst)))
)))

; Signature: rotate-nth(lst, n)
; Type: [list -> list]
; Purpose: Rotates a given list n times to the right.
; Pre-conditions: lst cannot be empty, n must be non-negative
; Tests: (rotate-nth '(1 2 3) 1) => (3 1 2)

(define rotate-nth
    (lambda (lst n)
        (if (equal? n 0)
            lst
            (rotate-nth (cons (last-item lst) (remove-last-item lst)) (- n 1)))
))